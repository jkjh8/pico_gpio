{
  "device_info": {
    "name": "Raspberry Pi Pico W5500 GPIO Controller",
    "hardware": {
      "mcu": "Raspberry Pi Pico",
      "ethernet": "W5500",
      "output": "HCT595 (16-bit shift register)",
      "input": "HCT165 (16-bit shift register)"
    },
    "features": [
      "16-channel digital input monitoring",
      "16-channel digital output control",
      "TCP/IP network communication",
      "UART RS-232 communication",
      "TEXT and JSON protocol support",
      "Device ID-based multi-device control",
      "Auto-feedback on input changes",
      "Factory reset capability"
    ]
  },
  "device_addressing": {
    "title": "Device ID System",
    "description": "All commands include an ID parameter for multi-device control",
    "id_types": [
      {
        "id": 0,
        "name": "Broadcast",
        "description": "Commands sent to ID 0 are processed by all devices on the network"
      },
      {
        "id": "1-254",
        "name": "Specific Device",
        "description": "Commands sent to a specific ID (1-254) are only processed by that device"
      }
    ]
  },
  "protocols": {
    "text_mode": {
      "name": "TEXT Mode",
      "description": "Simple comma-separated text commands for easy integration",
      "format": "command,param1,param2,...",
      "default": true,
      "commands": {
        "network": [
          {
            "command": "getip",
            "description": "Get current IP configuration",
            "parameters": [],
            "response": "ip,subnet,gateway,dhcp",
            "example": {
              "request": "getip",
              "response": "192.168.1.100,255.255.255.0,192.168.1.1,0"
            }
          },
          {
            "command": "setip",
            "description": "Set static IP configuration",
            "parameters": [
              "ip (xxx.xxx.xxx.xxx)",
              "subnet (xxx.xxx.xxx.xxx)",
              "gateway (xxx.xxx.xxx.xxx)"
            ],
            "response": "OK",
            "example": {
              "request": "setip,192.168.1.100,255.255.255.0,192.168.1.1",
              "response": "OK"
            },
            "note": "Device will restart after setting IP"
          },
          {
            "command": "getdhcp",
            "description": "Get DHCP status",
            "parameters": [],
            "response": "1 (enabled) or 0 (disabled)",
            "example": {
              "request": "getdhcp",
              "response": "0"
            }
          },
          {
            "command": "setdhcp",
            "description": "Set DHCP mode",
            "parameters": ["value (1=enable, 0=disable)"],
            "response": "OK",
            "example": {
              "request": "setdhcp,1",
              "response": "OK"
            },
            "note": "Device will restart after changing DHCP setting"
          },
          {
            "command": "getmac",
            "description": "Get MAC address",
            "parameters": [],
            "response": "XX:XX:XX:XX:XX:XX",
            "example": {
              "request": "getmac",
              "response": "00:08:DC:12:34:56"
            }
          }
        ],
        "tcp": [
          {
            "command": "getport",
            "description": "Get TCP server port",
            "parameters": [],
            "response": "port number",
            "example": {
              "request": "getport",
              "response": "5050"
            }
          },
          {
            "command": "setport",
            "description": "Set TCP server port",
            "parameters": ["port (1-65535)"],
            "response": "OK",
            "example": {
              "request": "setport,5050",
              "response": "OK"
            },
            "note": "Device will restart after changing port"
          }
        ],
        "uart": [
          {
            "command": "getbaud",
            "description": "Get UART baud rate",
            "parameters": [],
            "response": "baud rate",
            "example": {
              "request": "getbaud",
              "response": "9600"
            }
          },
          {
            "command": "setbaud",
            "description": "Set UART baud rate",
            "parameters": ["baud (9600, 19200, 38400, 57600, 115200)"],
            "response": "OK",
            "example": {
              "request": "setbaud,115200",
              "response": "OK"
            },
            "note": "Supported baud rates: 9600, 19200, 38400, 57600, 115200"
          }
        ],
        "gpio": [
          {
            "command": "getinput",
            "description": "Get single input channel state",
            "parameters": [
              "id (0=all, 1-254=specific device)",
              "channel (0-15)"
            ],
            "response": "true or false",
            "example": {
              "request": "getinput,0,5",
              "response": "true"
            }
          },
          {
            "command": "getinputs",
            "description": "Get all 16 input channels state",
            "parameters": ["id (0=all, 1-254=specific device)"],
            "response": "low_byte,high_byte (2-byte format)",
            "example": {
              "request": "getinputs,0",
              "response": "170,85"
            },
            "note": "Returns 16-bit value as two bytes (low 8 bits, high 8 bits)"
          },
          {
            "command": "setoutput",
            "description": "Set single output channel",
            "parameters": [
              "id (0=all, 1-254=specific device)",
              "channel (0-15)",
              "value (0 or 1)"
            ],
            "response": "OK",
            "example": {
              "request": "setoutput,0,3,1",
              "response": "OK"
            }
          },
          {
            "command": "setoutputs",
            "description": "Set all 16 output channels at once",
            "parameters": [
              "id (0=all, 1-254=specific device)",
              "low_byte (0-255)",
              "high_byte (0-255)"
            ],
            "response": "OK",
            "example": {
              "request": "setoutputs,0,255,0",
              "response": "OK"
            },
            "note": "Sets 16-bit value using two bytes (low 8 bits, high 8 bits)"
          },
          {
            "command": "getoutput",
            "description": "Get single output channel state",
            "parameters": [
              "id (0=all, 1-254=specific device)",
              "channel (0-15)"
            ],
            "response": "true or false",
            "example": {
              "request": "getoutput,0,7",
              "response": "false"
            }
          },
          {
            "command": "getoutputs",
            "description": "Get all 16 output channels state",
            "parameters": ["id (0=all, 1-254=specific device)"],
            "response": "low_byte,high_byte (2-byte format)",
            "example": {
              "request": "getoutputs,0",
              "response": "0,255"
            },
            "note": "Returns 16-bit value as two bytes (low 8 bits, high 8 bits)"
          }
        ],
        "mode": [
          {
            "command": "getmode",
            "description": "Get current communication mode",
            "parameters": [],
            "response": "TEXT or JSON",
            "example": {
              "request": "getmode",
              "response": "TEXT"
            }
          },
          {
            "command": "setmode",
            "description": "Set communication mode",
            "parameters": ["mode (TEXT or JSON)"],
            "response": "OK or {\"status\":\"ok\",\"mode\":\"JSON\"}",
            "example": {
              "request": "setmode,JSON",
              "response": "OK"
            },
            "note": "Device will restart after changing mode"
          }
        ],
        "system": [
          {
            "command": "getdeviceid",
            "description": "Get device ID",
            "parameters": [],
            "response": "device ID (1-254)",
            "example": {
              "request": "getdeviceid",
              "response": "1"
            }
          },
          {
            "command": "setdeviceid",
            "description": "Set device ID",
            "parameters": ["id (1-254)"],
            "response": "OK",
            "example": {
              "request": "setdeviceid,1",
              "response": "OK"
            },
            "note": "Device will restart after changing ID. ID 0 is reserved for broadcast."
          },
          {
            "command": "factoryreset",
            "description": "Reset to factory defaults",
            "parameters": [],
            "response": "OK",
            "example": {
              "request": "factoryreset",
              "response": "OK"
            },
            "defaults": {
              "ip": "192.168.1.100",
              "subnet": "255.255.255.0",
              "gateway": "192.168.1.1",
              "dhcp": "disabled",
              "port": "5050",
              "baud": "9600",
              "mode": "TEXT",
              "device_id": "1"
            },
            "note": "Works in both TEXT and JSON modes. Device will restart after reset."
          },
          {
            "command": "reboot",
            "description": "Restart the device",
            "parameters": [],
            "response": "OK",
            "example": {
              "request": "reboot",
              "response": "OK"
            }
          },
          {
            "command": "help",
            "description": "Display available commands",
            "parameters": [],
            "response": "Command list",
            "example": {
              "request": "help",
              "response": "Available commands: getip, setip, ..."
            }
          }
        ],
        "events": [
          {
            "event": "inputchanged",
            "description": "Auto-feedback when input state changes",
            "format": "inputchanged,id,low_byte,high_byte",
            "example": "inputchanged,1,170,85",
            "note": "Automatically sent to all connected TCP clients and UART when any input changes"
          }
        ]
      }
    },
    "json_mode": {
      "name": "JSON Mode",
      "description": "Structured JSON commands for advanced applications",
      "format": "{\"command\":\"name\",\"param1\":value,\"param2\":value,...}",
      "default": false,
      "commands": {
        "network": [
          {
            "command": "get_ip",
            "description": "Get current IP configuration",
            "request": {
              "command": "get_ip"
            },
            "response": {
              "status": "ok",
              "ip": "192.168.1.100",
              "subnet": "255.255.255.0",
              "gateway": "192.168.1.1",
              "dhcp": 0
            },
            "example": {
              "request": "{\"command\":\"get_ip\"}",
              "response": "{\"status\":\"ok\",\"ip\":\"192.168.1.100\",\"subnet\":\"255.255.255.0\",\"gateway\":\"192.168.1.1\",\"dhcp\":0}"
            }
          },
          {
            "command": "set_ip",
            "description": "Set static IP configuration",
            "request": {
              "command": "set_ip",
              "ip": "192.168.1.100",
              "subnet": "255.255.255.0",
              "gateway": "192.168.1.1"
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_ip\",\"ip\":\"192.168.1.100\",\"subnet\":\"255.255.255.0\",\"gateway\":\"192.168.1.1\"}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Device will restart after setting IP"
          },
          {
            "command": "get_dhcp",
            "description": "Get DHCP status",
            "request": {
              "command": "get_dhcp"
            },
            "response": {
              "status": "ok",
              "dhcp": 0
            },
            "example": {
              "request": "{\"command\":\"get_dhcp\"}",
              "response": "{\"status\":\"ok\",\"dhcp\":0}"
            }
          },
          {
            "command": "set_dhcp",
            "description": "Set DHCP mode",
            "request": {
              "command": "set_dhcp",
              "value": 1
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_dhcp\",\"value\":1}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Device will restart after changing DHCP setting"
          },
          {
            "command": "get_mac",
            "description": "Get MAC address",
            "request": {
              "command": "get_mac"
            },
            "response": {
              "status": "ok",
              "mac": "00:08:DC:12:34:56"
            },
            "example": {
              "request": "{\"command\":\"get_mac\"}",
              "response": "{\"status\":\"ok\",\"mac\":\"00:08:DC:12:34:56\"}"
            }
          }
        ],
        "tcp": [
          {
            "command": "get_port",
            "description": "Get TCP server port",
            "request": {
              "command": "get_port"
            },
            "response": {
              "status": "ok",
              "port": 5050
            },
            "example": {
              "request": "{\"command\":\"get_port\"}",
              "response": "{\"status\":\"ok\",\"port\":5050}"
            }
          },
          {
            "command": "set_port",
            "description": "Set TCP server port",
            "request": {
              "command": "set_port",
              "port": 5050
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_port\",\"port\":5050}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Device will restart after changing port"
          }
        ],
        "uart": [
          {
            "command": "get_baud",
            "description": "Get UART baud rate",
            "request": {
              "command": "get_baud"
            },
            "response": {
              "status": "ok",
              "baud": 9600
            },
            "example": {
              "request": "{\"command\":\"get_baud\"}",
              "response": "{\"status\":\"ok\",\"baud\":9600}"
            }
          },
          {
            "command": "set_baud",
            "description": "Set UART baud rate",
            "request": {
              "command": "set_baud",
              "baud": 115200
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_baud\",\"baud\":115200}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Supported baud rates: 9600, 19200, 38400, 57600, 115200"
          }
        ],
        "gpio": [
          {
            "command": "get_input",
            "description": "Get single input channel state",
            "request": {
              "command": "get_input",
              "id": 0,
              "channel": 5
            },
            "response": {
              "status": "ok",
              "value": true
            },
            "example": {
              "request": "{\"command\":\"get_input\",\"id\":0,\"channel\":5}",
              "response": "{\"status\":\"ok\",\"value\":true}"
            }
          },
          {
            "command": "get_inputs",
            "description": "Get all 16 input channels state",
            "request": {
              "command": "get_inputs",
              "id": 0
            },
            "response": {
              "status": "ok",
              "value": 43690
            },
            "example": {
              "request": "{\"command\":\"get_inputs\",\"id\":0}",
              "response": "{\"status\":\"ok\",\"value\":43690}"
            },
            "note": "Returns 16-bit integer value (0-65535)"
          },
          {
            "command": "set_output",
            "description": "Set single output channel",
            "request": {
              "command": "set_output",
              "id": 0,
              "channel": 3,
              "value": 1
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_output\",\"id\":0,\"channel\":3,\"value\":1}",
              "response": "{\"status\":\"ok\"}"
            }
          },
          {
            "command": "set_outputs",
            "description": "Set all 16 output channels at once",
            "request": {
              "command": "set_outputs",
              "id": 0,
              "value": 255
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_outputs\",\"id\":0,\"value\":255}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Value is 16-bit integer (0-65535)"
          },
          {
            "command": "get_output",
            "description": "Get single output channel state",
            "request": {
              "command": "get_output",
              "id": 0,
              "channel": 7
            },
            "response": {
              "status": "ok",
              "value": false
            },
            "example": {
              "request": "{\"command\":\"get_output\",\"id\":0,\"channel\":7}",
              "response": "{\"status\":\"ok\",\"value\":false}"
            }
          },
          {
            "command": "get_outputs",
            "description": "Get all 16 output channels state",
            "request": {
              "command": "get_outputs",
              "id": 0
            },
            "response": {
              "status": "ok",
              "value": 65280
            },
            "example": {
              "request": "{\"command\":\"get_outputs\",\"id\":0}",
              "response": "{\"status\":\"ok\",\"value\":65280}"
            },
            "note": "Returns 16-bit integer value (0-65535)"
          }
        ],
        "mode": [
          {
            "command": "get_mode",
            "description": "Get current communication mode",
            "request": {
              "command": "get_mode"
            },
            "response": {
              "status": "ok",
              "mode": "JSON"
            },
            "example": {
              "request": "{\"command\":\"get_mode\"}",
              "response": "{\"status\":\"ok\",\"mode\":\"JSON\"}"
            }
          },
          {
            "command": "set_mode",
            "description": "Set communication mode",
            "request": {
              "command": "set_mode",
              "mode": "TEXT"
            },
            "response": {
              "status": "ok",
              "mode": "TEXT"
            },
            "example": {
              "request": "{\"command\":\"set_mode\",\"mode\":\"TEXT\"}",
              "response": "{\"status\":\"ok\",\"mode\":\"TEXT\"}"
            },
            "note": "Device will restart after changing mode"
          }
        ],
        "system": [
          {
            "command": "get_device_id",
            "description": "Get device ID",
            "request": {
              "command": "get_device_id"
            },
            "response": {
              "status": "ok",
              "id": 1
            },
            "example": {
              "request": "{\"command\":\"get_device_id\"}",
              "response": "{\"status\":\"ok\",\"id\":1}"
            }
          },
          {
            "command": "set_device_id",
            "description": "Set device ID",
            "request": {
              "command": "set_device_id",
              "id": 1
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"set_device_id\",\"id\":1}",
              "response": "{\"status\":\"ok\"}"
            },
            "note": "Device will restart after changing ID. ID 0 is reserved for broadcast."
          },
          {
            "command": "factory_reset",
            "description": "Reset to factory defaults",
            "request": {
              "command": "factory_reset"
            },
            "response": {
              "status": "ok",
              "ip": "192.168.1.100",
              "port": 5050,
              "baud": 9600,
              "mode": "TEXT"
            },
            "example": {
              "request": "{\"command\":\"factory_reset\"}",
              "response": "{\"status\":\"ok\",\"ip\":\"192.168.1.100\",\"port\":5050,\"baud\":9600,\"mode\":\"TEXT\"}"
            },
            "note": "Can also be called with text command 'factoryreset' in JSON mode. Device will restart after reset."
          },
          {
            "command": "reboot",
            "description": "Restart the device",
            "request": {
              "command": "reboot"
            },
            "response": {
              "status": "ok"
            },
            "example": {
              "request": "{\"command\":\"reboot\"}",
              "response": "{\"status\":\"ok\"}"
            }
          }
        ],
        "events": [
          {
            "event": "input_changed",
            "description": "Auto-feedback when input state changes",
            "format": {
              "event": "input_changed",
              "id": 1,
              "value": 43690
            },
            "example": "{\"event\":\"input_changed\",\"id\":1,\"value\":43690}",
            "note": "Automatically sent to all connected TCP clients and UART when any input changes. Value is 16-bit integer."
          }
        ]
      }
    }
  },
  "quick_start": {
    "title": "Quick Start Guide",
    "steps": [
      {
        "step": 1,
        "title": "Connect Hardware",
        "description": "Connect Ethernet cable to W5500 module and power on the device"
      },
      {
        "step": 2,
        "title": "Connect via TCP",
        "description": "Connect to device using TCP client (default: 192.168.1.100:5050)"
      },
      {
        "step": 3,
        "title": "Set Device ID (Optional)",
        "description": "If using multiple devices, set unique ID for each device (TEXT: setdeviceid,1 / JSON: {\"command\":\"set_device_id\",\"id\":1})"
      },
      {
        "step": 4,
        "title": "Send Commands",
        "description": "Send TEXT or JSON commands to control GPIO or configure settings"
      }
    ]
  },
  "tips": {
    "title": "Tips & Best Practices",
    "items": [
      {
        "title": "Multi-Device Control",
        "description": "Use ID 0 to broadcast commands to all devices, or specific ID (1-254) for individual control"
      },
      {
        "title": "2-Byte Format in TEXT Mode",
        "description": "16-bit values are split into low and high bytes for easier handling (e.g., 43690 = 170,85)"
      },
      {
        "title": "Auto-Feedback",
        "description": "Device automatically sends input change notifications to all connected clients"
      },
      {
        "title": "Factory Reset Safety",
        "description": "factoryreset command works in both modes, even if JSON parsing fails"
      },
      {
        "title": "Configuration Persistence",
        "description": "All settings (IP, port, baud, mode, device ID) are stored in flash memory"
      },
      {
        "title": "Restart Requirement",
        "description": "Network, TCP port, UART, and mode changes require device restart to take effect"
      }
    ]
  }
}
